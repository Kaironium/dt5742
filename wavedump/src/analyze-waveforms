#!/usr/bin/env python3
from __future__ import print_function, division
import h5py
import numpy as np

def iqr(x):
    return np.percentile(x,75) - np.percentile(x,25)

def get_threshold_crossing(x, data, threshold=0.4, rising=True):
    """
    Returns the times at which the waveforms in `x` cross 40% of their minimum
    value.
    """
    data = np.asarray(data)
    argmin = np.argmin(data,axis=-1)
    thresholds = threshold*data[np.arange(data.shape[0]),argmin]
    if rising:
        il = data.shape[1]-np.argmax(((np.arange(data.shape[1]) < argmin[:,np.newaxis]) & (data > thresholds[:,np.newaxis]))[:,::-1],axis=-1)-1
        ir = il + 1
        ir[ir >= data.shape[1]] = data.shape[1]-1
        i = np.arange(data.shape[0])
        return x[il] + (thresholds-data[i,il])*(x[ir]-x[il])/(data[i,ir]-data[i,il])
    else:
        il = data.shape[1]-np.argmax(((np.arange(data.shape[1]) > argmin[:,np.newaxis]) & (data < thresholds[:,np.newaxis]))[:,::-1],axis=-1)-1
        ir = il + 1
        ir[ir >= data.shape[1]] = data.shape[1]-1
        i = np.arange(data.shape[0])
        return x[il] + (thresholds-data[i,il])*(x[ir]-x[il])/(data[i,ir]-data[i,il])

def get_rise_time(x, data):
    t10 = get_threshold_crossing(x, data, 0.1)
    t90 = get_threshold_crossing(x, data, 0.9)
    return t90 - t10

def get_fall_time(x, data):
    t10 = get_threshold_crossing(x, data, 0.1, rising=False)
    t90 = get_threshold_crossing(x, data, 0.9, rising=False)
    return t10 - t90

def get_times(x, data, baseline=10):
    """
    Returns the times at which the waveforms in `x` cross 40% of their minimum
    value.
    """
    data = np.asarray(data)
    # Get the first 10 ns of every waveform to calculate the noise level
    noise = iqr(data[:,np.where(x < x[0] + baseline)[0]])
    # Get events with a pulse
    pulses = np.min(data,axis=-1) < -noise*5
    # Select events with pulses. If there are no matches (which might be the
    # case for the triggering channel), then don't apply the selection.
    if np.count_nonzero(pulses):
        data = data[pulses]
    argmin = np.argmin(data,axis=-1)
    threshold = 0.4*data[np.arange(data.shape[0]),argmin]
    return x[data.shape[1]-np.argmax(((np.arange(data.shape[1]) < argmin[:,np.newaxis]) & (data > threshold[:,np.newaxis]))[:,::-1],axis=-1)-1]

def get_window(x, data, left=1, right=10):
    """
    Returns the indices start and stop over which you should integrate the
    waveforms in `x`. The window is found by calculating the median hit time
    for all pulses in `x` and then going back 10 ns and forward 125 ns for sodium and 10 ns otherwise.
    """
    data = np.asarray(data)
    t = get_times(x,data)
    mean_hit_time = np.median(t)
    a, b = np.searchsorted(x,[mean_hit_time-left,mean_hit_time+right])
    if a < 0:
        a = 0
    if b > len(x) - 1:
        b = len(x) - 1
    return a, b

def integrate(x, data, a, b):
    """
    Integrate all waveforms in `data` with times `x`.
    """
    
    # i = v/r
    # divide by 50 ohms to convert to a charge
    return -np.trapz(data[:,a:b],x=x[a:b])*1000/50.0

def get_bins(x):
    """
    Returns bins for the data `x` using the Freedman Diaconis rule. See
    https://en.wikipedia.org/wiki/Freedman%E2%80%93Diaconis_rule.
    
    The equation below returns bins using said rule. A smaller bin value than this was chosen after finetuning for better fitting results.
    bin_width = 2*iqr(x)/(len(x)**(1/3.0))
    """
    
    bin_width = 0.5*iqr(x)/(len(x)**(1/3.0))
    return np.arange(np.min(x),np.max(x),bin_width)

if __name__ == '__main__':
    from argparse import ArgumentParser
    import ROOT
    import matplotlib.pyplot as plt
    import psycopg2
    import psycopg2.extensions
    import os
    import sys

    parser = ArgumentParser(description='Analyze data from the Agilent scope')
    parser.add_argument('filename',help='input filename (hdf5 format)')
    parser.add_argument('-o','--output', default=None, help='output file name', required=True)
    parser.add_argument('--plot', default=False, action='store_true', help='plot the waveforms and charge integral')
    parser.add_argument('-u','--upload', default=False, action='store_true', help='upload results to the database')
    args = parser.parse_args()

    data = {}
    data['ch_511'] = []
    data['ch_511_rise_time'] = []
    data['ch_511_fall_time'] = []

    charge = {}
    with h5py.File(args.filename) as f:
        data['barcode'] = int(f.attrs['barcode'])
        data['voltage'] = int(f.attrs['voltage'])
        data['git_sha1'] = f.attrs['git_sha1'].decode("UTF-8")
        data['git_dirty'] = f.attrs['git_dirty'].decode("UTF-8")

        x = np.linspace(0,f.attrs['record_length']*1e3/f.attrs['drs4_frequency'],f.attrs['record_length'])
        for i in range(16):
            channel = 'ch%i' % i

            if channel not in f:
                print("failed to find channel %i" % i)
                continue

            # Skip the first 10 events since that's after we transition from
            # transparent mode to output mode
            y = f[channel][10:]*2/0xfff

            # Remove baseline
            y -= np.median(y[:,:100],axis=-1)[:,np.newaxis]

            a, b = get_window(x,y,left=20,right=400)
            
            charge[channel] = integrate(x,y, a, b)

            # FIXME: Should only get average pulse from events near 511 peak
            if 'avg_pulse_y' in data:
                data['avg_pulse_y'] += y.mean(axis=0)
                data['avg_pulse_count'] += 1
            else:
                data['avg_pulse_x'] = x
                data['avg_pulse_y'] = y.mean(axis=0)
                data['avg_pulse_count'] = 1

            data['ch_511_rise_time'].append(np.median(get_rise_time(x, y)))
            data['ch_511_fall_time'].append(np.median(get_fall_time(x, y)))
            
            if args.plot:
                plt.subplot(4,4,i+1)
                plt.plot(x,y[:100].T)
                plt.xlabel("Time (ns)")
                plt.ylabel("Voltage (V)")
                plt.title(channel)
                plt.axvline(x[a])
                plt.axvline(x[b])

    data['avg_pulse_y'] /= data['avg_pulse_count']
    data['avg_pulse_x'] = list(map(float,data['avg_pulse_x']))
    data['avg_pulse_y'] = list(map(float,data['avg_pulse_y']))

    if args.plot:
        plt.figure()

    f = ROOT.TFile(args.output,"recreate")
    for i in range(16):
        channel = 'ch%i' % i

        if channel not in charge:
            continue

        bins = get_bins(charge[channel])
        hist, bins = np.histogram(charge[channel],bins=bins)
        bincenters = (bins[1:] + bins[:-1])/2
        h = ROOT.TH1D(channel,"Charge Integral for %s" % channel,len(bins),bins[0],bins[-1])
        for x in charge[channel]:
            h.Fill(x)
        h.GetXaxis().SetTitle("Charge (pC)")

        data['ch_511'].append(bincenters[np.argmax(hist)])
        
        if args.plot:
            plt.subplot(4,4,i+1)
            plt.hist(charge[channel],bins=bins,histtype='step')
            plt.xlabel("Charge (pC)")
            plt.title(channel)

        h.Write()

    f.Close()

    for i in range(16,32):
        data['ch_511'].append(None)
        data['ch_511_rise_time'].append(None)
        data['ch_511_fall_time'].append(None)

    if args.upload:
        if 'BTL_DB_HOST' not in os.environ:
            print("need to set BTL_DB_HOST environment variable!",file=sys.stderr)
            sys.exit(1)

        if 'BTL_DB_PASS' not in os.environ:
            print("need to set BTL_DB_PASS environment variable!",file=sys.stderr)
            sys.exit(1)

        print("Uploading results to the database...")
        conn = psycopg2.connect(dbname='btl_qa',
                                user='btl',
                                host=os.environ['BTL_DB_HOST'],
                                password=os.environ['BTL_DB_PASS'])
        conn.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)

        cursor = conn.cursor()
        cursor.execute("INSERT INTO btl_qa (barcode, voltage, ch_511, ch_511_rise_time, ch_511_fall_time, avg_pulse_x, avg_pulse_y, git_sha1, git_dirty, institution) VALUES (%(barcode)s, %(voltage)s, %(ch_511)s, %(ch_511_rise_time)s, %(ch_511_fall_time)s, %(avg_pulse_x)s, %(avg_pulse_y)s, %(git_sha1)s, %(git_dirty)s, 'Caltech'::inst)", data)
        print("Done")

    if args.plot:
        plt.show()
